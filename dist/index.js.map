{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { EmailAdapter, SendEmailOptions } from \"payload\"\n\nimport { APIError } from \"payload\"\n\nexport type useSendAdapterArgs = {\n\tapiKey: string\n\tdefaultFromAddress: string\n\tdefaultFromName: string\n\tscheduledAt?: string\n\ttemplateId?: string\n\tuseSendUrl: string\n\tvariables?: Record<string, string>\n}\n\ntype UseSendEmailAdapter = EmailAdapter<useSendResponse>\n\ntype useSendError = {\n\terror: {\n\t\tcode: string\n\t\tmessage: string\n\t}\n}\n\ntype useSendResponse = { emailId: string } | useSendError\n\n/**\n * Email adapter for [useSend](https://usesend.com) REST API\n */\nexport const sendAdapter = (args: useSendAdapterArgs): UseSendEmailAdapter => {\n\tconst {\n\t\tapiKey,\n\t\tdefaultFromAddress,\n\t\tdefaultFromName,\n\t\tscheduledAt,\n\t\ttemplateId,\n\t\tuseSendUrl,\n\t\tvariables,\n\t} = args\n\n\tconst adapter: UseSendEmailAdapter = () => ({\n\t\tname: \"usesend-rest\",\n\t\tdefaultFromName,\n\t\tdefaultFromAddress,\n\t\tsendEmail: async (message) => {\n\t\t\tconst sendEmailOptions = mapPayloadToUseSendEmail(\n\t\t\t\tdefaultFromName,\n\t\t\t\tdefaultFromAddress,\n\t\t\t\tmessage\n\t\t\t)\n\n\t\t\tconst payload = {\n\t\t\t\t...sendEmailOptions,\n\t\t\t\t...(scheduledAt ? { scheduledAt } : {}),\n\t\t\t\t...(templateId ? { templateId } : {}),\n\t\t\t\t...(variables ? { variables } : {}),\n\t\t\t}\n\n\t\t\tconst res = await fetch(`${useSendUrl}/api/v1/emails`, {\n\t\t\t\tbody: JSON.stringify(payload),\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: `Bearer ${apiKey}`,\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t\tmethod: \"POST\",\n\t\t\t})\n\n\t\t\tconst data = (await res.json()) as useSendResponse\n\n\t\t\tif (\"emailId\" in data) {\n\t\t\t\treturn data\n\t\t\t} else {\n\t\t\t\tconst statusCode = res.status\n\t\t\t\tlet formattedError = `Error sending email: ${statusCode}`\n\t\t\t\tif (\"error\" in data) {\n\t\t\t\t\tformattedError += ` ${data.error.code} - ${data.error.message}`\n\t\t\t\t}\n\n\t\t\t\tthrow new APIError(formattedError, statusCode)\n\t\t\t}\n\t\t},\n\t})\n\n\treturn adapter\n}\n\nfunction mapPayloadToUseSendEmail(\n\tdefaultFromName: string,\n\tdefaultFromAddress: string,\n\tmessage: SendEmailOptions\n): useSendEmailOptions {\n\tconst emailOptions: Partial<useSendEmailOptions> = {\n\t\tfrom: mapFromAddress(message.from, defaultFromName, defaultFromAddress),\n\t\tsubject: message.subject,\n\t\tto: mapAddresses(message.to),\n\t}\n\n\tif (message.text?.toString().trim().length > 0) {\n\t\temailOptions.text = message.text\n\t} else {\n\t\temailOptions.text = \"Please view this email in an HTML-compatible client.\"\n\t}\n\n\tif (message.html?.toString().trim()) {\n\t\temailOptions.html = message.html.toString()\n\t}\n\n\tif (message.attachments?.length) {\n\t\tif (message.attachments.length > 10) {\n\t\t\tthrow new APIError(\"Maximum of 10 attachments allowed\", 400)\n\t\t}\n\t\temailOptions.attachments = mapAttachments(message.attachments)\n\t}\n\n\tif (message.replyTo) {\n\t\temailOptions.replyTo = mapAddresses(message.replyTo)\n\t}\n\n\tif (message.cc) {\n\t\temailOptions.cc = mapAddresses(message.cc)\n\t}\n\n\tif (message.bcc) {\n\t\temailOptions.bcc = mapAddresses(message.bcc)\n\t}\n\n\treturn emailOptions as useSendEmailOptions\n}\n\nfunction mapFromAddress(\n\taddress: SendEmailOptions[\"from\"],\n\tdefaultFromName: string,\n\tdefaultFromAddress: string\n): useSendEmailOptions[\"from\"] {\n\tif (!address) {\n\t\treturn `${defaultFromName} <${defaultFromAddress}>`\n\t}\n\n\tif (typeof address === \"string\") {\n\t\treturn address\n\t}\n\n\treturn `${address.name} <${address.address}>`\n}\n\nfunction mapAddresses(\n\taddresses: SendEmailOptions[\"to\"]\n): useSendEmailOptions[\"to\"] {\n\tif (!addresses) {\n\t\treturn \"\"\n\t}\n\n\tif (typeof addresses === \"string\") {\n\t\treturn addresses\n\t}\n\n\tif (Array.isArray(addresses)) {\n\t\treturn addresses.map((address) =>\n\t\t\ttypeof address === \"string\" ? address : address.address\n\t\t)\n\t}\n\n\treturn [addresses.address]\n}\n\nfunction mapAttachments(\n\tattachments: SendEmailOptions[\"attachments\"]\n): useSendEmailOptions[\"attachments\"] {\n\tif (!attachments) {\n\t\treturn []\n\t}\n\n\tif (attachments.length > 10) {\n\t\tthrow new APIError(\"Maximum of 10 attachments allowed\", 400)\n\t}\n\n\treturn attachments.map((attachment) => {\n\t\tif (!attachment.filename || !attachment.content) {\n\t\t\tthrow new APIError(\"Attachment is missing filename or content\", 400)\n\t\t}\n\n\t\tif (typeof attachment.content === \"string\") {\n\t\t\treturn {\n\t\t\t\tcontent: Buffer.from(attachment.content).toString(\"base64\"),\n\t\t\t\tfilename: attachment.filename,\n\t\t\t}\n\t\t}\n\n\t\tif (attachment.content instanceof Buffer) {\n\t\t\treturn {\n\t\t\t\tcontent: attachment.content.toString(\"base64\"),\n\t\t\t\tfilename: attachment.filename,\n\t\t\t}\n\t\t}\n\n\t\tthrow new APIError(\"Attachment content must be a string or a buffer\", 400)\n\t})\n}\n\ntype useSendEmailOptions = {\n\t/**\n\t * Filename and content of attachments. Max 10 attachments per email.\n\t *\n\t * @link https://docs.usesend.com/api-reference/emails/send-email#body-attachments\n\t */\n\tattachments?: Attachment[]\n\n\t/**\n\t * Blind carbon copy recipient email address. For multiple addresses, send as an array of strings.\n\t *\n\t * @link https://docs.usesend.com/api-reference/emails/send-email#body-bcc\n\t */\n\tbcc?: string | string[]\n\n\t/**\n\t * Carbon copy recipient email address. For multiple addresses, send as an array of strings.\n\t *\n\t * @link https://docs.usesend.com/api-reference/emails/send-email#body-cc\n\t */\n\tcc?: string | string[]\n\n\t/**\n\t * Sender email address. To include a friendly name, use the format `\"Your Name <sender@domain.com>\"`\n\t *\n\t * @link https://docs.usesend.com/api-reference/emails/send-email#body-from\n\t */\n\tfrom: string\n\n\t/**\n\t * The HTML version of the message.\n\t *\n\t * @link https://docs.usesend.com/api-reference/emails/send-email#body-html\n\t */\n\thtml?: null | string\n\n\t/**\n\t * The ID of the email this is in reply to, if applicable.\n\t *\n\t * @link https://docs.usesend.com/api-reference/emails/send-email#body-in-reply-to-id\n\t */\n\tinReplyToId?: string\n\n\t/**\n\t * Reply-to email address. For multiple addresses, send as an array of strings.\n\t *\n\t * @link https://docs.usesend.com/api-reference/emails/send-email#body-reply-to\n\t */\n\treplyTo?: string | string[]\n\n\t/**\n\t * The date and time to send the email. If not provided, the email will be sent immediately.\n\t *\n\t * @link https://docs.usesend.com/api-reference/emails/send-email#body-scheduled-at\n\t */\n\tscheduledAt?: string\n\n\t/**\n\t * Email subject. Optional when templateId is provided.\n\t *\n\t * @link https://docs.usesend.com/api-reference/emails/send-email#body-subject\n\t */\n\tsubject?: string\n\n\t/**\n\t * ID of a template to use for this email.\n\t *\n\t * @link https://docs.usesend.com/api-reference/emails/send-email#body-template-id\n\t */\n\ttemplateId?: string\n\n\t/**\n\t * The plain text version of the message.\n\t *\n\t * @link https://docs.usesend.com/api-reference/emails/send-email#body-text\n\t */\n\ttext?: null | string\n\n\t/**\n\t * Recipient email address. For multiple addresses, send as an array of strings. Max 50.\n\t *\n\t * @link https://docs.usesend.com/api-reference/emails/send-email#body-to\n\t */\n\tto: string | string[]\n\n\t/**\n\t * Email template variables. Allows for dynamic content in the email template.\n\t *\n\t * @link https://docs.usesend.com/api-reference/emails/send-email#body-variables\n\t */\n\tvariables?: Record<string, string>\n}\n\ntype Attachment = {\n\t/** Content of an attached file. */\n\tcontent: string\n\t/** Name of attached file. */\n\tfilename: string\n}\n"],"names":["APIError","sendAdapter","args","apiKey","defaultFromAddress","defaultFromName","scheduledAt","templateId","useSendUrl","variables","adapter","name","sendEmail","message","sendEmailOptions","mapPayloadToUseSendEmail","payload","res","fetch","body","JSON","stringify","headers","Authorization","method","data","json","statusCode","status","formattedError","error","code","emailOptions","from","mapFromAddress","subject","to","mapAddresses","text","toString","trim","length","html","attachments","mapAttachments","replyTo","cc","bcc","address","addresses","Array","isArray","map","attachment","filename","content","Buffer"],"mappings":"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"}